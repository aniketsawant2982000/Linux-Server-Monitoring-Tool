#!/bin/bash

# =============================================================================
# Linux Server Monitoring Tool
# Author: System Administrator
# Description: Monitors CPU, Memory, Disk usage and sends alerts
# Usage: ./server_monitor.sh [options]
# =============================================================================

# Configuration file path
CONFIG_FILE="$HOME/.server_monitor.conf"
LOG_FILE="/var/log/server_monitor.log"

# Default thresholds (can be overridden by config file)
CPU_THRESHOLD=80
MEMORY_THRESHOLD=85
DISK_THRESHOLD=90
CHECK_INTERVAL=60
ALERT_EMAIL=""
ENABLE_EMAIL_ALERTS=false
ENABLE_LOG_ALERTS=true

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_colored() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to log messages
log_message() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    if [ "$ENABLE_LOG_ALERTS" = true ]; then
        echo "[$timestamp] [$level] $message" >> "$LOG_FILE"
    fi
    
    # Also print to console with colors
    case $level in
        "ERROR")
            print_colored $RED "[$timestamp] [ERROR] $message"
            ;;
        "WARNING")
            print_colored $YELLOW "[$timestamp] [WARNING] $message"
            ;;
        "INFO")
            print_colored $GREEN "[$timestamp] [INFO] $message"
            ;;
        *)
            echo "[$timestamp] [$level] $message"
            ;;
    esac
}

# Function to send email alerts
send_email_alert() {
    local subject=$1
    local message=$2
    
    if [ "$ENABLE_EMAIL_ALERTS" = true ] && [ ! -z "$ALERT_EMAIL" ]; then
        if command -v mail >/dev/null 2>&1; then
            echo "$message" | mail -s "$subject" "$ALERT_EMAIL"
            log_message "INFO" "Email alert sent to $ALERT_EMAIL"
        else
            log_message "ERROR" "Mail command not available. Install mailutils package."
        fi
    fi
}

# Function to check CPU usage
check_cpu() {
    # Get CPU usage (average over 1 second)
    local cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | awk -F'%' '{print $1}')
    
    # Alternative method using /proc/stat if top output format varies
    if [ -z "$cpu_usage" ]; then
        cpu_usage=$(grep 'cpu ' /proc/stat | awk '{usage=($2+$4)*100/($2+$4+$5)} END {printf "%.1f", usage}')
    fi
    
    echo "$cpu_usage"
}

# Function to check memory usage
check_memory() {
    local mem_info=$(free | grep Mem:)
    local total_mem=$(echo $mem_info | awk '{print $2}')
    local used_mem=$(echo $mem_info | awk '{print $3}')
    local mem_usage=$(echo "scale=1; $used_mem * 100 / $total_mem" | bc)
    
    echo "$mem_usage"
}

# Function to check disk usage
check_disk() {
    local partition=${1:-"/"}
    local disk_usage=$(df -h "$partition" | awk 'NR==2 {print $5}' | sed 's/%//')
    
    echo "$disk_usage"
}

# Function to get system information
get_system_info() {
    print_colored $BLUE "=== System Information ==="
    echo "Hostname: $(hostname)"
    echo "Uptime: $(uptime -p)"
    echo "Load Average: $(uptime | awk -F'load average:' '{print $2}')"
    echo "Kernel: $(uname -r)"
    echo "Date: $(date)"
    echo ""
}

# Function to display current status
display_status() {
    local cpu_usage=$(check_cpu)
    local mem_usage=$(check_memory)
    local disk_usage=$(check_disk)
    
    get_system_info
    
    print_colored $BLUE "=== Current Resource Usage ==="
    
    # CPU Status
    if (( $(echo "$cpu_usage > $CPU_THRESHOLD" | bc -l) )); then
        print_colored $RED "CPU Usage: ${cpu_usage}% (CRITICAL - Threshold: ${CPU_THRESHOLD}%)"
    elif (( $(echo "$cpu_usage > $(echo "$CPU_THRESHOLD * 0.8" | bc)" | bc -l) )); then
        print_colored $YELLOW "CPU Usage: ${cpu_usage}% (WARNING)"
    else
        print_colored $GREEN "CPU Usage: ${cpu_usage}% (OK)"
    fi
    
    # Memory Status
    if (( $(echo "$mem_usage > $MEMORY_THRESHOLD" | bc -l) )); then
        print_colored $RED "Memory Usage: ${mem_usage}% (CRITICAL - Threshold: ${MEMORY_THRESHOLD}%)"
    elif (( $(echo "$mem_usage > $(echo "$MEMORY_THRESHOLD * 0.8" | bc)" | bc -l) )); then
        print_colored $YELLOW "Memory Usage: ${mem_usage}% (WARNING)"
    else
        print_colored $GREEN "Memory Usage: ${mem_usage}% (OK)"
    fi
    
    # Disk Status
    if (( disk_usage > DISK_THRESHOLD )); then
        print_colored $RED "Disk Usage (/): ${disk_usage}% (CRITICAL - Threshold: ${DISK_THRESHOLD}%)"
    elif (( disk_usage > $((DISK_THRESHOLD * 80 / 100)) )); then
        print_colored $YELLOW "Disk Usage (/): ${disk_usage}% (WARNING)"
    else
        print_colored $GREEN "Disk Usage (/): ${disk_usage}% (OK)"
    fi
    
    echo ""
}

# Function to check thresholds and send alerts
check_and_alert() {
    local cpu_usage=$(check_cpu)
    local mem_usage=$(check_memory)
    local disk_usage=$(check_disk)
    local hostname=$(hostname)
    
    # Check CPU threshold
    if (( $(echo "$cpu_usage > $CPU_THRESHOLD" | bc -l) )); then
        local message="ALERT: High CPU usage detected on $hostname - Current: ${cpu_usage}%, Threshold: ${CPU_THRESHOLD}%"
        log_message "ERROR" "$message"
        send_email_alert "CPU Alert - $hostname" "$message"
    fi
    
    # Check Memory threshold
    if (( $(echo "$mem_usage > $MEMORY_THRESHOLD" | bc -l) )); then
        local message="ALERT: High Memory usage detected on $hostname - Current: ${mem_usage}%, Threshold: ${MEMORY_THRESHOLD}%"
        log_message "ERROR" "$message"
        send_email_alert "Memory Alert - $hostname" "$message"
    fi
    
    # Check Disk threshold
    if (( disk_usage > DISK_THRESHOLD )); then
        local message="ALERT: High Disk usage detected on $hostname - Current: ${disk_usage}%, Threshold: ${DISK_THRESHOLD}%"
        log_message "ERROR" "$message"
        send_email_alert "Disk Alert - $hostname" "$message"
    fi
}

# Function to create default configuration file
create_config() {
    cat > "$CONFIG_FILE" << EOF
# Server Monitor Configuration File
# Threshold values (in percentage)
CPU_THRESHOLD=80
MEMORY_THRESHOLD=85
DISK_THRESHOLD=90

# Check interval in seconds (for continuous monitoring)
CHECK_INTERVAL=60

# Email settings
ALERT_EMAIL=""
ENABLE_EMAIL_ALERTS=false

# Logging settings
ENABLE_LOG_ALERTS=true
EOF
    
    print_colored $GREEN "Configuration file created at: $CONFIG_FILE"
    print_colored $YELLOW "Please edit the configuration file to customize thresholds and email settings."
}

# Function to load configuration
load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
        log_message "INFO" "Configuration loaded from $CONFIG_FILE"
    else
        log_message "INFO" "No configuration file found. Using default settings."
    fi
}

# Function to show top processes
show_top_processes() {
    print_colored $BLUE "=== Top CPU Consuming Processes ==="
    ps aux --sort=-%cpu | head -10
    echo ""
    
    print_colored $BLUE "=== Top Memory Consuming Processes ==="
    ps aux --sort=-%mem | head -10
    echo ""
}

# Function to generate detailed report
generate_report() {
    local report_file="/tmp/server_report_$(date +%Y%m%d_%H%M%S).txt"
    
    {
        echo "============================================="
        echo "      SERVER MONITORING REPORT"
        echo "============================================="
        echo "Generated: $(date)"
        echo "Hostname: $(hostname)"
        echo ""
        
        echo "=== RESOURCE USAGE ==="
        echo "CPU Usage: $(check_cpu)%"
        echo "Memory Usage: $(check_memory)%"
        echo "Disk Usage (/): $(check_disk)%"
        echo ""
        
        echo "=== SYSTEM INFO ==="
        echo "Uptime: $(uptime -p)"
        echo "Load Average: $(uptime | awk -F'load average:' '{print $2}')"
        echo "Total Memory: $(free -h | grep Mem: | awk '{print $2}')"
        echo "Available Memory: $(free -h | grep Mem: | awk '{print $7}')"
        echo ""
        
        echo "=== DISK USAGE BY PARTITION ==="
        df -h
        echo ""
        
        echo "=== TOP PROCESSES BY CPU ==="
        ps aux --sort=-%cpu | head -10
        echo ""
        
        echo "=== TOP PROCESSES BY MEMORY ==="
        ps aux --sort=-%mem | head -10
        echo ""
        
        echo "=== RECENT LOG ENTRIES ==="
        if [ -f "$LOG_FILE" ]; then
            tail -20 "$LOG_FILE"
        else
            echo "No log file found."
        fi
        
    } > "$report_file"
    
    print_colored $GREEN "Detailed report generated: $report_file"
}

# Function to show usage
show_usage() {
    echo "Linux Server Monitoring Tool"
    echo ""
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -h, --help              Show this help message"
    echo "  -s, --status            Show current system status"
    echo "  -m, --monitor           Start continuous monitoring"
    echo "  -c, --config            Create/recreate configuration file"
    echo "  -t, --top               Show top processes"
    echo "  -r, --report            Generate detailed report"
    echo "  -l, --logs              Show recent log entries"
    echo "  --test-alert            Send test alert"
    echo ""
    echo "Configuration file: $CONFIG_FILE"
    echo "Log file: $LOG_FILE"
}

# Function to show recent logs
show_logs() {
    if [ -f "$LOG_FILE" ]; then
        print_colored $BLUE "=== Recent Log Entries ==="
        tail -50 "$LOG_FILE"
    else
        print_colored $YELLOW "No log file found at: $LOG_FILE"
    fi
}

# Function to test alerts
test_alert() {
    log_message "INFO" "Testing alert system..."
    send_email_alert "Test Alert - $(hostname)" "This is a test alert from the server monitoring tool."
    print_colored $GREEN "Test alert sent (check logs for details)"
}

# Main function
main() {
    # Check if running as root for log file access
    if [ ! -w "$(dirname "$LOG_FILE")" ]; then
        LOG_FILE="$HOME/server_monitor.log"
        print_colored $YELLOW "Warning: Cannot write to /var/log. Using $LOG_FILE instead."
    fi
    
    # Load configuration
    load_config
    
    # Check for required commands
    if ! command -v bc >/dev/null 2>&1; then
        print_colored $RED "Error: 'bc' command not found. Please install bc package."
        exit 1
    fi
    
    # Parse command line arguments
    case "${1:-}" in
        -h|--help)
            show_usage
            ;;
        -s|--status)
            display_status
            check_and_alert
            ;;
        -m|--monitor)
            print_colored $GREEN "Starting continuous monitoring (Press Ctrl+C to stop)..."
            log_message "INFO" "Starting continuous monitoring with interval: ${CHECK_INTERVAL}s"
            while true; do
                check_and_alert
                sleep "$CHECK_INTERVAL"
            done
            ;;
        -c|--config)
            create_config
            ;;
        -t|--top)
            show_top_processes
            ;;
        -r|--report)
            generate_report
            ;;
        -l|--logs)
            show_logs
            ;;
        --test-alert)
            test_alert
            ;;
        "")
            display_status
            ;;
        *)
            echo "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
}

# Trap Ctrl+C for graceful shutdown
trap 'print_colored $YELLOW "\nMonitoring stopped."; log_message "INFO" "Monitoring stopped by user"; exit 0' INT

# Run main function with all arguments
main "$@"
